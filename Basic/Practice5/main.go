package main

import (
	"bufio" // برای خواندن ورودی از کاربر به صورت خط به خط
	"fmt"   // برای عملیات ورودی/خروجی قالب‌بندی شده (مانند چاپ در کنسول)
	"os"    // برای تعامل با سیستم عامل، به ویژه عملیات فایل
)

// تابع اصلی که اجرای برنامه از آن شروع می‌شود.
func main() {
	// فراخوانی تابعی که مسئولیت ایجاد یا خواندن فایل را بر عهده دارد.
	CreateOrReadFile()
}

// تابع اصلی برای مدیریت فایل: ایجاد، نوشتن و در نهایت خواندن فایل.
func CreateOrReadFile() {
	// تعریف نام ثابت برای فایلی که قرار است استفاده شود.
	const filename = "notes.txt"

	// 1. باز کردن/ایجاد فایل:
	// os.OpenFile فایل را باز می‌کند. اگر وجود نداشته باشد، با پرچم os.O_CREATE آن را ایجاد می‌کند.
	// os.O_APPEND باعث می‌شود که داده‌ها به انتهای فایل اضافه شوند.
	// os.O_WRONLY فایل را برای عملیات نوشتن باز می‌کند.
	// 0644 مجوزهای دسترسی به فایل (خواندن و نوشتن برای مالک، فقط خواندن برای گروه و دیگران).
	f, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	// بررسی خطا در زمان باز کردن/ایجاد فایل.
	check(err)
	// `defer` تضمین می‌کند که تابع f.Close() درست قبل از خروج تابع `CreateOrReadFile` اجرا می‌شود،
	// و بدین ترتیب فایل بسته می‌شود تا منابع سیستم آزاد شوند.
	defer f.Close()

	// 2. نوشتن عنوان در صورت خالی بودن فایل:
	// os.Stat اطلاعات آماری فایل (مانند اندازه) را برمی‌گرداند.
	// اگر خطا nil باشد (فایل وجود دارد) و اندازه فایل 0 بایت باشد (فایل خالی است).
	if info, err := os.Stat(filename); err == nil && info.Size() == 0 {
		// نوشتن خط عنوان "Current Notes:" در ابتدای فایل.
		_, err = f.WriteString("Current Notes:\n")
		// بررسی خطا در زمان نوشتن در فایل.
		check(err)
	}

	// 3. حلقه اصلی برای دریافت یادداشت‌های کاربر:
	for {
		// دریافت یادداشت جدید از کاربر.
		note := UserNote()

		// اگر کاربر "0" وارد کند، حلقه را متوقف و خارج می‌شود.
		if note == "0" {
			break
		}
		// اگر کاربر خط خالی وارد کند، از این تکرار صرف نظر کرده و به شروع حلقه برمی‌گردد.
		if note == "" {
			continue
		}

		// نوشتن یادداشت در فایل با یک علامت "-" در ابتدا و یک خط جدید در انتها.
		_, err = f.WriteString("- " + note + "\n")
		// بررسی خطا در زمان نوشتن.
		check(err)

		// اطلاع به کاربر که یادداشت ذخیره شده است.
		fmt.Println("Your note has been saved!")
	} // پایان حلقه `for`

	// 4. خواندن و چاپ محتوای نهایی فایل:
	// os.ReadFile کل محتوای فایل را می‌خواند و به صورت بایت برمی‌گرداند.
	data, err := os.ReadFile(filename)
	// بررسی خطا در زمان خواندن فایل.
	check(err)

	// چاپ محتوای فایل به کنسول با تبدیل بایت‌ها به رشته.
	fmt.Println("--- File Content ---")
	fmt.Println(string(data))
	fmt.Println("--------------------")
}

// تابع کمکی برای مدیریت خطاها.
func check(e error) {
	// اگر خطا `nil` نباشد (یعنی خطایی رخ داده است).
	if e != nil {
		// برنامه را متوقف کرده و پیام خطا را نمایش می‌دهد.
		panic(e)
	}
}

// تابعی برای دریافت ورودی یادداشت از کاربر.
func UserNote() string {
	var note string
	// نمایش پیام راهنما به کاربر.
	fmt.Print("Enter your note(0 for EXIT): ")
	// ایجاد یک اسکنر جدید برای خواندن ورودی استاندارد (کیبورد).
	scanner := bufio.NewScanner(os.Stdin)
	// اسکنر خط بعدی را می‌خواند.
	scanner.Scan()
	// متن خوانده شده را در متغیر `note` ذخیره می‌کند.
	note = scanner.Text()
	// یادداشت وارد شده را برمی‌گرداند.
	return note
}